From 0160e16519d7d50b73a2bfaf388e34129db606f3 Mon Sep 17 00:00:00 2001
From: Martin Dvorak <martin.dvorak@mindforger.com>
Date: Sun, 17 Jun 2018 17:10:20 +0200
Subject: [PATCH 1/1] Fixing MITIE so that it compiles WITHOUT warnings on
 -Wall

---
 dlib/dlib/matrix/matrix_math_functions.h        | 59 ++++++++++++-------------
 dlib/dlib/matrix/matrix_utilities.h             | 12 ++---
 dlib/dlib/smart_pointers/shared_ptr.h           |  6 ++-
 dlib/dlib/svm/sequence_labeler.h                |  2 +-
 mitielib/include/mitie/named_entity_extractor.h |  6 +--
 5 files changed, 43 insertions(+), 42 deletions(-)

diff --git a/dlib/dlib/matrix/matrix_math_functions.h b/dlib/dlib/matrix/matrix_math_functions.h
index d1db3ed..2fe1af5 100644
--- a/dlib/dlib/matrix/matrix_math_functions.h
+++ b/dlib/dlib/matrix/matrix_math_functions.h
@@ -18,26 +18,25 @@ namespace dlib
 
 // ----------------------------------------------------------------------------------------
 
-    DLIB_DEFINE_FUNCTION_M(op_sqrt, sqrt, std::sqrt ,7);
-    DLIB_DEFINE_FUNCTION_M(op_log, log, std::log ,7);
-    DLIB_DEFINE_FUNCTION_M(op_log10, log10, std::log10 ,7);
-    DLIB_DEFINE_FUNCTION_M(op_exp, exp, std::exp ,7);
-
-    DLIB_DEFINE_FUNCTION_M(op_conj, conj, std::conj ,2);
-
-    DLIB_DEFINE_FUNCTION_M(op_ceil, ceil, std::ceil ,7);
-    DLIB_DEFINE_FUNCTION_M(op_floor, floor, std::floor ,7);
-
-    DLIB_DEFINE_FUNCTION_M(op_sin, sin, std::sin ,7);
-    DLIB_DEFINE_FUNCTION_M(op_cos, cos, std::cos ,7);
-    DLIB_DEFINE_FUNCTION_M(op_tan, tan, std::tan ,7);
-    DLIB_DEFINE_FUNCTION_M(op_sinh, sinh, std::sinh ,7);
-    DLIB_DEFINE_FUNCTION_M(op_cosh, cosh, std::cosh ,7);
-    DLIB_DEFINE_FUNCTION_M(op_tanh, tanh, std::tanh ,7);
-    DLIB_DEFINE_FUNCTION_M(op_asin, asin, std::asin ,7);
-    DLIB_DEFINE_FUNCTION_M(op_acos, acos, std::acos ,7);
-    DLIB_DEFINE_FUNCTION_M(op_atan, atan, std::atan ,7);
-
+    DLIB_DEFINE_FUNCTION_M(op_sqrt, sqrt, std::sqrt ,7)
+    DLIB_DEFINE_FUNCTION_M(op_log, log, std::log ,7)
+    DLIB_DEFINE_FUNCTION_M(op_log10, log10, std::log10 ,7)
+    DLIB_DEFINE_FUNCTION_M(op_exp, exp, std::exp ,7)
+
+    DLIB_DEFINE_FUNCTION_M(op_conj, conj, std::conj ,2)
+
+    DLIB_DEFINE_FUNCTION_M(op_ceil, ceil, std::ceil ,7)
+    DLIB_DEFINE_FUNCTION_M(op_floor, floor, std::floor ,7)
+
+    DLIB_DEFINE_FUNCTION_M(op_sin, sin, std::sin ,7)
+    DLIB_DEFINE_FUNCTION_M(op_cos, cos, std::cos ,7)
+    DLIB_DEFINE_FUNCTION_M(op_tan, tan, std::tan ,7)
+    DLIB_DEFINE_FUNCTION_M(op_sinh, sinh, std::sinh ,7)
+    DLIB_DEFINE_FUNCTION_M(op_cosh, cosh, std::cosh ,7)
+    DLIB_DEFINE_FUNCTION_M(op_tanh, tanh, std::tanh ,7)
+    DLIB_DEFINE_FUNCTION_M(op_asin, asin, std::asin ,7)
+    DLIB_DEFINE_FUNCTION_M(op_acos, acos, std::acos ,7)
+    DLIB_DEFINE_FUNCTION_M(op_atan, atan, std::atan ,7)
 // ----------------------------------------------------------------------------------------
 
     namespace impl
@@ -157,16 +156,16 @@ namespace dlib
 
     }
 
-    DLIB_DEFINE_FUNCTION_M(op_sigmoid, sigmoid, impl::sigmoid, 7);
-    DLIB_DEFINE_FUNCTION_MS(op_round_zeros, round_zeros, impl::round_zeros_eps, 7);
-    DLIB_DEFINE_FUNCTION_M(op_round_zeros2, round_zeros, impl::round_zeros, 7);
-    DLIB_DEFINE_FUNCTION_M(op_cubed, cubed, impl::cubed, 7);
-    DLIB_DEFINE_FUNCTION_M(op_squared, squared, impl::squared, 6);
-    DLIB_DEFINE_FUNCTION_M(op_sign, sign, impl::sign, 6);
-    DLIB_DEFINE_FUNCTION_MS(op_pow1, pow, impl::pow1, 7);
-    DLIB_DEFINE_FUNCTION_SM(op_pow2, pow, impl::pow2, 7);
-    DLIB_DEFINE_FUNCTION_M(op_reciprocal, reciprocal, impl::reciprocal, 6);
-    DLIB_DEFINE_FUNCTION_M(op_reciprocal_max, reciprocal_max, impl::reciprocal_max, 6);
+    DLIB_DEFINE_FUNCTION_M(op_sigmoid, sigmoid, impl::sigmoid, 7)
+    DLIB_DEFINE_FUNCTION_MS(op_round_zeros, round_zeros, impl::round_zeros_eps, 7)
+    DLIB_DEFINE_FUNCTION_M(op_round_zeros2, round_zeros, impl::round_zeros, 7)
+    DLIB_DEFINE_FUNCTION_M(op_cubed, cubed, impl::cubed, 7)
+    DLIB_DEFINE_FUNCTION_M(op_squared, squared, impl::squared, 6)
+    DLIB_DEFINE_FUNCTION_M(op_sign, sign, impl::sign, 6)
+    DLIB_DEFINE_FUNCTION_MS(op_pow1, pow, impl::pow1, 7)
+    DLIB_DEFINE_FUNCTION_SM(op_pow2, pow, impl::pow2, 7)
+    DLIB_DEFINE_FUNCTION_M(op_reciprocal, reciprocal, impl::reciprocal, 6)
+    DLIB_DEFINE_FUNCTION_M(op_reciprocal_max, reciprocal_max, impl::reciprocal_max, 6)
 
 // ----------------------------------------------------------------------------------------
 
diff --git a/dlib/dlib/matrix/matrix_utilities.h b/dlib/dlib/matrix/matrix_utilities.h
index 219ed8b..f06d398 100644
--- a/dlib/dlib/matrix/matrix_utilities.h
+++ b/dlib/dlib/matrix/matrix_utilities.h
@@ -1062,7 +1062,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_lessthan, impl::lessthan, 1);
+    DLIB_DEFINE_OP_MS(op_lessthan, impl::lessthan, 1)
 
     template <
         typename EXP,
@@ -1112,7 +1112,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_lessthan_eq, impl::lessthan_eq, 1);
+    DLIB_DEFINE_OP_MS(op_lessthan_eq, impl::lessthan_eq, 1)
 
     template <
         typename EXP,
@@ -1162,7 +1162,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_greaterthan, impl::greaterthan, 1);
+    DLIB_DEFINE_OP_MS(op_greaterthan, impl::greaterthan, 1)
 
     template <
         typename EXP,
@@ -1212,7 +1212,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_greaterthan_eq, impl::greaterthan_eq, 1);
+    DLIB_DEFINE_OP_MS(op_greaterthan_eq, impl::greaterthan_eq, 1)
 
     template <
         typename EXP,
@@ -1262,7 +1262,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_equal_to, impl::equal_to, 1);
+    DLIB_DEFINE_OP_MS(op_equal_to, impl::equal_to, 1)
 
     template <
         typename EXP,
@@ -1312,7 +1312,7 @@ namespace dlib
         }
         
     }
-    DLIB_DEFINE_OP_MS(op_not_equal_to, impl::not_equal_to, 1);
+    DLIB_DEFINE_OP_MS(op_not_equal_to, impl::not_equal_to, 1)
 
 
     template <
diff --git a/dlib/dlib/smart_pointers/shared_ptr.h b/dlib/dlib/smart_pointers/shared_ptr.h
index a9b04b4..fff049e 100644
--- a/dlib/dlib/smart_pointers/shared_ptr.h
+++ b/dlib/dlib/smart_pointers/shared_ptr.h
@@ -296,7 +296,8 @@ namespace dlib
 
         template<typename Y>
         explicit shared_ptr(
-            std::auto_ptr<Y>& r
+            // Dvorka for MindForger: replacing 'std::auto_ptr<Y>& r' with 'std::shared_ptr<Y>& r' to avoid compilation warnings & its risky use
+            std::shared_ptr<Y>& r
         )
         {
             DLIB_ASSERT(r.get() != 0,
@@ -328,7 +329,8 @@ namespace dlib
 
         template<typename Y> 
         shared_ptr& operator= (
-            std::auto_ptr<Y>& r
+            // dvorka: replacing 'std::auto_ptr<Y>& r' with 'std::shared_ptr<Y>& r' to avoid compilation warnings & its risky use
+            std::shared_ptr<Y>& r
         )
         {
             DLIB_ASSERT(r.get() != 0,
diff --git a/dlib/dlib/svm/sequence_labeler.h b/dlib/dlib/svm/sequence_labeler.h
index 882cdb8..4456fb2 100644
--- a/dlib/dlib/svm/sequence_labeler.h
+++ b/dlib/dlib/svm/sequence_labeler.h
@@ -64,7 +64,7 @@ namespace dlib
             bool, 
             template reject_labeling<matrix<unsigned long> >,
             (const typename T::sequence_type&, const matrix_exp<matrix<unsigned long> >&, unsigned long)const
-        );
+        )
 
         template <typename feature_extractor, typename EXP, typename sequence_type>
         typename enable_if<has_reject_labeling<feature_extractor>,bool>::type call_reject_labeling_if_exists (
diff --git a/mitielib/include/mitie/named_entity_extractor.h b/mitielib/include/mitie/named_entity_extractor.h
index 80f8815..1b6e3b8 100644
--- a/mitielib/include/mitie/named_entity_extractor.h
+++ b/mitielib/include/mitie/named_entity_extractor.h
@@ -253,9 +253,9 @@ namespace mitie
 
         const dlib::multiclass_linear_decision_function<dlib::sparse_linear_kernel<ner_sample_type>,unsigned long>& get_df() const {
             return df;
-        };
+        }
 
-        const int get_max_supported_pure_model_version() const { return pure_model_version_1; }
+        int get_max_supported_pure_model_version() const { return pure_model_version_1; }
 
         enum supported_pure_model_versions {
             pure_model_version_0 = 0,
@@ -276,9 +276,9 @@ namespace mitie
             fingerprint = dlib::murmur_hash3_128bit(&buf[0], buf.size()).first;
         }
 
-        int pure_model_version;
         dlib::uint64 fingerprint;
         dlib::uint64 tfe_fingerprint;
+        int pure_model_version;
         std::vector<std::string> tag_name_strings;
         total_word_feature_extractor fe;
         dlib::sequence_segmenter<ner_feature_extractor> segmenter;
-- 
2.7.4

